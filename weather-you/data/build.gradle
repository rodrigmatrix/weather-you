plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'kotlinx-serialization'
}

android {
    namespace 'com.rodrigmatrix.weatheryou.data'
    compileSdk Sdk.compileSdk

    buildFeatures {
        buildConfig = true
    }

    defaultConfig {
        minSdk Sdk.phoneMinSdk
        targetSdk Sdk.targetSdk

        def localProperties = new Properties()
        localProperties.load(new FileInputStream(rootProject.file("local.properties")))

        buildConfigField "String", "VISUAL_CODING_URL", "\"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/\""
        buildConfigField "String", "VISUAL_CODING_TOKEN", localProperties['visualcoding.token']

        buildConfigField "String", "OPEN_WEATHER_URL", "\"https://api.openweathermap.org/data/2.5/\""
        buildConfigField "String", "OPEN_WEATHER_TOKEN", localProperties['openweather.token']

        buildConfigField "String", "GOOGLE_MAPS_URL", "\"https://maps.googleapis.com/maps/api/\""
        buildConfigField "String", "GOOGLE_MAPS_TOKEN", localProperties['googlemaps.token']

        buildConfigField "String", "API_NINJAS_URL", "\"https://api.api-ninjas.com/\""
        buildConfigField "String", "API_NINJAS_TOKEN", localProperties['apininjas.token']

        buildConfigField "String", "WEATHER_KIT_URL", "\"https://weatherkit.apple.com/api/\""
        buildConfigField "String", "WEATHER_KIT_TOKEN", localProperties['weatherkit.token']
        buildConfigField "String", "WEATHER_KIT_ID", localProperties['weatherkit.id']
        buildConfigField "String", "WEATHER_KIT_KID", localProperties['weatherkit.kid']
        buildConfigField "String", "WEATHER_KIT_ISS", localProperties['weatherkit.iss']
        buildConfigField "String", "WEATHER_KIT_SUB", localProperties['weatherkit.sub']

        buildConfigField "String", "LOCATION_IQ_URL", "\"https://api.locationiq.com/v1/\""
        buildConfigField "String", "LOCATION_IQ_TOKEN", localProperties['locationiq.token']

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    kotlin.sourceSets.configureEach {
        languageSettings.optIn("kotlin.RequiresOptIn")
    }
}

dependencies {
    implementation project(LocalModules.core)
    implementation project(LocalModules.domain)
    implementation project(LocalModules.weatherIcons)

    implementation(libs.androidx.ktx)
    implementation(libs.androidx.lifecycle)
    implementation(libs.androidx.window)

    implementation(libs.kotlin.stdlib)
    implementation(libs.kotlin.coroutines.android)
    implementation(libs.kotlin.serialization)
    implementation(libs.coroutines.playServices)

    implementation(libs.jwt.api)
    runtimeOnly(libs.jwt.impl)
    runtimeOnly(libs.jwt.jackson)

    implementation platform(libs.firebase.bom)
    implementation(libs.firebase.remote.config)
    implementation(libs.firebase.analytics)
    implementation(libs.firebase.database)

    implementation(libs.room.runtime)
    kapt(libs.room.compiler)
    implementation(libs.room.ktx)

    implementation(libs.workManager)

    implementation(libs.datastore.core)
    implementation(libs.datastore.preferences)

    implementation(libs.retrofit)
    implementation(platform(libs.okHttp))
    implementation(libs.retrofit.kotlinx.converter)
    implementation(libs.okHttp.interceptor)

    implementation(libs.koin.android)

    implementation(libs.jodaTime)

    implementation(libs.google.play.location)

    testImplementation(libs.junit)
    testImplementation(libs.mockk)
    testImplementation(libs.turbine)
}